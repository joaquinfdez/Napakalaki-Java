/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;
import napakalaki.Napakalaki;
import napakalaki.Player;
import napakalaki.PlayerBlindado;
import napakalaki.Treasure;

/**
 *
 * @author DiegoJesús
 */
public class PlayerView extends javax.swing.JPanel {

    /**
     * Creates new form PlayerView
     */
    private Player playerModel;
    private Napakalaki napakalakiModel;

    public void setPlayer(Player p) {

        playerModel = p;

        //Actualizamos nombre, nivel, y demás datos
        JNombre.setText(p.getName());
        JNivel.setText(p.getLevels() + "");
        JPuedeRobar.setText(p.canISteal() + "");
        JNombreEnemigo.setText(p.getEnemy().getName());
        JNivelCombate.setText(p.getCombatLevel() + "");
        
        if(p instanceof PlayerBlindado)
        {
            JLEsBlindado.setText("Si");
        }
        else
        {
            JLEsBlindado.setText("No");
        }
        
        //En el caso de ser sectario, rellena el campo
        if (p.esSectario()) {
            JEsSectario.setText("Si");
        } else {
            JEsSectario.setText("No");
        }
        
        //JEsSectario.setText(p.rellenaCampo());

        // A continuación se actualizan sus tesoros
        this.fillTreasurePanel(JvisibleTreasures, playerModel.getVisibleTreasures());
        this.fillTreasurePanel(JhiddenTreasures, playerModel.getHiddenTreasures());

        //Se pone su mal rollo pendiente en su vista correspondiente.
        pendingBadConsequenceView1.setPendingBadConsequence(p.getBadConsequence());

        repaint();
        revalidate();

    }

    public void setNapakalaki(Napakalaki napakalaki) {
        napakalakiModel = napakalaki;
    }

    public PlayerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enum_nombre = new javax.swing.JLabel();
        JNombre = new javax.swing.JLabel();
        enum_nivel = new javax.swing.JLabel();
        JNivel = new javax.swing.JLabel();
        enum_nivelCombate = new javax.swing.JLabel();
        JNivelCombate = new javax.swing.JLabel();
        enum_nombreEnemigo = new javax.swing.JLabel();
        enum_puedeRobar = new javax.swing.JLabel();
        JNombreEnemigo = new javax.swing.JLabel();
        JPuedeRobar = new javax.swing.JLabel();
        enum_EsSectario = new javax.swing.JLabel();
        JEsSectario = new javax.swing.JLabel();
        JvisibleTreasures = new javax.swing.JPanel();
        JhiddenTreasures = new javax.swing.JPanel();
        enum_visibleTrausures = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        JBRobarTesoro = new javax.swing.JButton();
        JBHacerTesoroVisible = new javax.swing.JButton();
        JBDescartarTesoro = new javax.swing.JButton();
        JBHDescartarTodosLosTesoros = new javax.swing.JButton();
        pendingBadConsequenceView1 = new gui.PendingBadConsequenceView();
        JBDecrementaNivelEnemigo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        JLEsBlindado = new javax.swing.JLabel();

        enum_nombre.setText("Nombre:");

        JNombre.setText("jLabel1");

        enum_nivel.setText("Nivel:");

        JNivel.setText("jLabel1");

        enum_nivelCombate.setText("Nivel de combate:");

        JNivelCombate.setText("jLabel1");

        enum_nombreEnemigo.setText("Nombre del enemigo:");

        enum_puedeRobar.setText("¿Puede robar?");

        JNombreEnemigo.setText("jLabel1");

        JPuedeRobar.setText("jLabel2");

        enum_EsSectario.setText("Es sectario:");

        JEsSectario.setText("jLabel1");

        JvisibleTreasures.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 0, 204)));

        JhiddenTreasures.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 0, 0)));

        enum_visibleTrausures.setText("Tesoros visibles");

        jLabel2.setText("Tesoros ocultos");

        JBRobarTesoro.setText("RobarTesoro");
        JBRobarTesoro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBRobarTesoroActionPerformed(evt);
            }
        });

        JBHacerTesoroVisible.setText("HacerVisible");
        JBHacerTesoroVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBHacerTesoroVisibleActionPerformed(evt);
            }
        });

        JBDescartarTesoro.setText("DescartarTesoro");
        JBDescartarTesoro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBDescartarTesoroActionPerformed(evt);
            }
        });

        JBHDescartarTodosLosTesoros.setText("DescartarTodosTes.");
        JBHDescartarTodosLosTesoros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBHDescartarTodosLosTesorosActionPerformed(evt);
            }
        });

        pendingBadConsequenceView1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(255, 255, 0)));

        JBDecrementaNivelEnemigo.setText("Decrem.nivel del Enemigo");
        JBDecrementaNivelEnemigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBDecrementaNivelEnemigoActionPerformed(evt);
            }
        });

        jLabel1.setText("EsBlindado?");

        JLEsBlindado.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(JhiddenTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JvisibleTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(enum_puedeRobar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(JPuedeRobar))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(enum_nombre)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(JNombre))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(enum_nombreEnemigo)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(JNombreEnemigo))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(enum_EsSectario)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(JEsSectario)))
                                        .addGap(56, 56, 56)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(enum_nivelCombate)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(JNivelCombate))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(enum_nivel)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(JNivel)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(JLEsBlindado)))
                                        .addGap(57, 57, 57))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(enum_visibleTrausures, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(358, 358, 358)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JBDecrementaNivelEnemigo)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(JBHDescartarTodosLosTesoros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(JBDescartarTesoro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(JBHacerTesoroVisible, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(JBRobarTesoro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(83, 83, 83)))
                        .addComponent(pendingBadConsequenceView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(enum_nombre)
                                        .addComponent(JNombre))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel3)
                                        .addComponent(JLEsBlindado)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(enum_nombreEnemigo)
                                            .addComponent(JNombreEnemigo))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(enum_puedeRobar)
                                            .addComponent(JPuedeRobar)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(enum_nivel)
                                            .addComponent(JNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(JNivelCombate)
                                            .addComponent(enum_nivelCombate))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(JEsSectario)
                                    .addComponent(enum_EsSectario)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JBRobarTesoro)
                                .addGap(3, 3, 3)
                                .addComponent(JBHacerTesoroVisible)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JBDescartarTesoro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JBHDescartarTodosLosTesoros)))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(enum_visibleTrausures)
                            .addComponent(JBDecrementaNivelEnemigo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JvisibleTreasures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2))
                    .addComponent(pendingBadConsequenceView1, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(JhiddenTreasures, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {

        // Se recorren los tesoros que contiene el panel,
        // almacenando en un vector aquellos que están seleccionados.
        // Finalmente se devuelve dicho vector.
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
        for (Component c : aPanel.getComponents()) {
            tv = (TreasureView) c;
            if (tv.isSelected()) {
                output.add(tv.getTreasure());
            }
        }

        return output;
    }

    private ArrayList<Treasure> getTreasures(JPanel aPanel) {

        // Se recorren los tesoros que contiene el panel,
        // almacenando en un vector aquellos que están seleccionados.
        // Finalmente se devuelve dicho vector.
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
        for (Component c : aPanel.getComponents()) {
            tv = (TreasureView) c;
            output.add(tv.getTreasure());
        }

        return output;
    }
    
    //****************************************************************************
    // Botones
    //****************************************************************************
    private void JBHacerTesoroVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBHacerTesoroVisibleActionPerformed
        //Seleccionamos del panel
        ArrayList<Treasure> selHidden = getSelectedTreasures(JhiddenTreasures);

        //Llamamos a la función que realiza la acción
        napakalakiModel.makeTreasuresVisible(selHidden);

        //Actualizamos panel
        setPlayer(napakalakiModel.getCurrentPlayer());
        repaint();
    }//GEN-LAST:event_JBHacerTesoroVisibleActionPerformed

    private void JBRobarTesoroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBRobarTesoroActionPerformed
        Treasure t = playerModel.stealTreasure();

        //Actualizamos
        setPlayer(napakalakiModel.getCurrentPlayer());
        repaint();
    }//GEN-LAST:event_JBRobarTesoroActionPerformed

    private void JBDescartarTesoroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBDescartarTesoroActionPerformed
        //Seleccionamos la información
        ArrayList<Treasure> selVisible = getSelectedTreasures(JvisibleTreasures);
        ArrayList<Treasure> selHidden = getSelectedTreasures(JhiddenTreasures);

        //Función que desarrolla acción
        napakalakiModel.discardVisibleTreasures(selVisible);
        napakalakiModel.discardHiddenTreasures(selHidden);

        //Actualizamos
        setPlayer(napakalakiModel.getCurrentPlayer());
        repaint();
    }//GEN-LAST:event_JBDescartarTesoroActionPerformed

    private void JBHDescartarTodosLosTesorosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBHDescartarTodosLosTesorosActionPerformed
        //Seleccionamos la información
        ArrayList<Treasure> selVisible = getTreasures(JvisibleTreasures);
        ArrayList<Treasure> selHidden = getTreasures(JhiddenTreasures);

        //Función que desarrolla acción
        napakalakiModel.discardVisibleTreasures(selVisible);
        napakalakiModel.discardHiddenTreasures(selHidden);

        //Actualizamos
        setPlayer(napakalakiModel.getCurrentPlayer());
        repaint();
    }//GEN-LAST:event_JBHDescartarTodosLosTesorosActionPerformed

    //EXAMEN
    private void JBDecrementaNivelEnemigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBDecrementaNivelEnemigoActionPerformed
        // Seleccionamos la informacion
        ArrayList<Treasure> selHidden = getTreasures(JhiddenTreasures);
        
        //En función si es de tipo PlayerBlindado o de tipo normal hará una funcionalidad u otra
        playerModel.decrementaNiveles(selHidden);
        
        //disableDecrementaNivelEnemigo();
        //Actualizamos
        setPlayer(napakalakiModel.getCurrentPlayer());
        repaint();
    }//GEN-LAST:event_JBDecrementaNivelEnemigoActionPerformed
    //FIN EXAMEN
    //****************************************************************************
    // Selección de paneles
    //****************************************************************************
    private void fillTreasurePanel(JPanel aPanel, ArrayList<Treasure> aList) {
        // Se elimina la información antigua, si la hubiera
        aPanel.removeAll();
        // Se recorre la lista de tesoros construyendo y añadiendo sus vistas
        // al panel
        for (Treasure t : aList) {
            TreasureView aTreasureView = new TreasureView();
            aTreasureView.setTreasure(t);
            aTreasureView.setVisible(true);
            aPanel.add(aTreasureView);
        }
        // Se fuerza la actualización visual del panel
        aPanel.repaint();
        aPanel.revalidate();
    }
    
    //****************************************************************************
    // Funciones para activar y desactivar botones desde otras clases y métodos
    //****************************************************************************
    public void disableEquiparTesoros() {
        JBHacerTesoroVisible.setEnabled(false);
    }

    public void enableEquiparTesoros() {
        JBHacerTesoroVisible.setEnabled(true);
    }

    public void disableRobarTesoros() {
        JBRobarTesoro.setEnabled(false);
        setPlayer(napakalakiModel.getCurrentPlayer());
    }

    public void enableRobarTesoros() {
        JBRobarTesoro.setEnabled(true);
        setPlayer(napakalakiModel.getCurrentPlayer());
    }
    
    //EXAMEN
    public void enableDecrementaNivelEnemigo()
    {
        JBDecrementaNivelEnemigo.setEnabled(true);
    }
    
    public void disableDecrementaNivelEnemigo()
    {
        JBDecrementaNivelEnemigo.setEnabled(true);
    }
    //FIN EXAMEN
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBDecrementaNivelEnemigo;
    private javax.swing.JButton JBDescartarTesoro;
    private javax.swing.JButton JBHDescartarTodosLosTesoros;
    private javax.swing.JButton JBHacerTesoroVisible;
    private javax.swing.JButton JBRobarTesoro;
    private javax.swing.JLabel JEsSectario;
    private javax.swing.JLabel JLEsBlindado;
    private javax.swing.JLabel JNivel;
    private javax.swing.JLabel JNivelCombate;
    private javax.swing.JLabel JNombre;
    private javax.swing.JLabel JNombreEnemigo;
    private javax.swing.JLabel JPuedeRobar;
    private javax.swing.JPanel JhiddenTreasures;
    private javax.swing.JPanel JvisibleTreasures;
    private javax.swing.JLabel enum_EsSectario;
    private javax.swing.JLabel enum_nivel;
    private javax.swing.JLabel enum_nivelCombate;
    private javax.swing.JLabel enum_nombre;
    private javax.swing.JLabel enum_nombreEnemigo;
    private javax.swing.JLabel enum_puedeRobar;
    private javax.swing.JLabel enum_visibleTrausures;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private gui.PendingBadConsequenceView pendingBadConsequenceView1;
    // End of variables declaration//GEN-END:variables

}
